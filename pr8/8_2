// Абстрактный класс BankCard
abstract class BankCard(val cardNumber: String, val pinCode: String) {
    // Абстрактный метод для получения баланса
    abstract fun getBalance(): Double
}

// Класс CreditCard, наследник от BankCard
class CreditCard(cardNumber: String, pinCode: String, val creditLimit: Double, val debt: Double) : BankCard(cardNumber, pinCode) {
    override fun getBalance(): Double {
        return creditLimit - debt
    }
}

// Класс DebitCard, наследник от BankCard
class DebitCard(cardNumber: String, pinCode: String, val balance: Double) : BankCard(cardNumber, pinCode) {
    override fun getBalance(): Double {
        return balance
    }
}

// Enum класс для типов транзакций
enum class TransactionType {
    WITHDRAWAL, DEPOSIT
}

// Data-класс для хранения информации о транзакциях
data class Transaction(val cardNumber: String, val amount: Double, val date: String, val type: TransactionType)

fun main() {
    // Пример использования классов
    val creditCard = CreditCard("1234-5678-9876-5432", "1234", 5000.0, 1000.0)
    val debitCard = DebitCard("9876-5432-1234-5678", "5678", 2000.0)

    println("Баланс по кредитной карте: ${creditCard.getBalance()}")
    println("Баланс по дебетовой карте: ${debitCard.getBalance()}")

    val transaction1 = Transaction("1234-5678-9876-5432", 500.0, "2023-11-02", TransactionType.WITHDRAWAL)
    val transaction2 = Transaction("9876-5432-1234-5678", 100.0, "2023-11-03", TransactionType.DEPOSIT)

    println("Транзакция 1: $transaction1")
    println("Транзакция 2: $transaction2")
}
